{"version":3,"sources":["SortingAlgos/mergeAlgorithm.js","SortingAlgos/bubbleAlgorithm.js","SortingAlgos/quickAlgorithm.js","SortingVisualiser/SortingVisualiser.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","length","animationArray","auxiliaryArray","slice","mergeSort","mainArray","startIndex","endIndex","halfwayPoint","Math","floor","k","i","j","compareAnimation","push","merge","indexOne","indexTwo","getBubbleSortAnimations","temp","notSorted","len","bubbleSort","quickSort","arr","start","end","pivotIndex","pivot","swap","swapAnimation","noAnimation","endOfArray","a","b","splice","windowWidth","window","innerWidth","maxHeight","innerHeight","SortingVisualiser","props","state","this","resetArray","min","max","numberOfBars","trunc","random","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","MergeAlgorithm","setTimeout","firstIndex","newHeight","height","QuickAlgorithm","valueOne","startingPosition","indexOfEndOfArray","BubbleAlgorithm","firstValue","secondIndex","secondValue","value","firstStyle","secondStyle","color","className","map","index","onClick","MergeSort","QuickSort","BubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49e9ee05.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  // if nothing to compare\r\n  if (array.length < 2) return array;\r\n\r\n  const animationArray = [];\r\n  const auxiliaryArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animationArray);\r\n  return animationArray;\r\n}\r\n\r\nfunction mergeSort(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animationArray\r\n) {\r\n  if (startIndex === endIndex) return;\r\n  const halfwayPoint = Math.floor((startIndex + endIndex) / 2);\r\n\r\n  // on the left side\r\n  mergeSort(\r\n    auxiliaryArray,\r\n    startIndex,\r\n    halfwayPoint,\r\n    mainArray,\r\n    animationArray\r\n  );\r\n  // on the right side\r\n  mergeSort(\r\n    auxiliaryArray,\r\n    halfwayPoint + 1,\r\n    endIndex,\r\n    mainArray,\r\n    animationArray\r\n  );\r\n\r\n  // merge the two sides\r\n  merge(\r\n    mainArray,\r\n    startIndex,\r\n    halfwayPoint,\r\n    endIndex,\r\n    auxiliaryArray,\r\n    animationArray\r\n  );\r\n}\r\n\r\nfunction merge(\r\n  mainArray,\r\n  startIndex,\r\n  halfwayPoint,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animationArray\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = halfwayPoint + 1;\r\n  while (i <= halfwayPoint && j <= endIndex) {\r\n    compareAnimation(animationArray, i, j);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // swap the values\r\n      animationArray.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // swap the values\r\n      animationArray.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= halfwayPoint) {\r\n    compareAnimation(animationArray, i, i);\r\n\r\n    // swap the values\r\n    animationArray.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    compareAnimation(animationArray, j, j);\r\n\r\n    // swap the values\r\n    animationArray.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n// added twice, once for highlightling and the second for marking as sorted\r\nfunction compareAnimation(animationArray, indexOne, indexTwo) {\r\n  animationArray.push([indexOne, indexTwo]);\r\n  animationArray.push([indexOne, indexTwo]);\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  // if nothing to compare\r\n  if (array.length < 2) return array;\r\n\r\n  const animationArray = [];\r\n  bubbleSort(array, array.length - 1, animationArray);\r\n  return animationArray;\r\n}\r\n\r\nfunction bubbleSort(mainArray, endIndex, animationArray) {\r\n  var temp;\r\n  var notSorted = true;\r\n  var len = mainArray.length;\r\n\r\n  while (notSorted) {\r\n    notSorted = false;\r\n    for (let i = 0; i < len - 1; i++) {\r\n      compareAnimation(animationArray, i, i + 1);\r\n      animationArray.push([i, mainArray[i], i + 1, mainArray[i + 1]]);\r\n      if (mainArray[i] > mainArray[i + 1]) {\r\n        temp = mainArray[i];\r\n        mainArray[i] = mainArray[i + 1];\r\n        mainArray[i + 1] = temp;\r\n        notSorted = true;\r\n      }\r\n    }\r\n    len--;\r\n  }\r\n}\r\n\r\n// added twice, once for highlightling and the second for marking as sorted\r\nfunction compareAnimation(animationArray, indexOne, indexTwo) {\r\n  animationArray.push([indexOne, indexTwo]);\r\n  animationArray.push([indexOne, indexTwo]);\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  // if nothing to compare\r\n  if (array.length < 2) return array;\r\n\r\n  const animationArray = [];\r\n  quickSort(array, animationArray);\r\n  // sortedArray.filter((value) => value !== undefined);\r\n  return animationArray;\r\n}\r\n\r\nconst quickSort = (arr, animationArray, start = 0, end = arr.length) => {\r\n  let pivotIndex = pivot(arr, animationArray, start, end);\r\n\r\n  if (start >= end) return arr;\r\n  quickSort(arr, animationArray, start, pivotIndex);\r\n  quickSort(arr, animationArray, pivotIndex + 1, end);\r\n\r\n  return arr;\r\n};\r\n\r\nconst pivot = (arr, animationArray, start, end) => {\r\n  let pivotIndex = start;\r\n  let pivot = arr[pivotIndex];\r\n\r\n  for (let i = start + 1; i < end; i++) {\r\n    compareAnimation(animationArray, i, pivotIndex);\r\n    if (arr[i] < pivot) {\r\n      swap(arr, i, pivotIndex);\r\n      swapAnimation(animationArray, arr, i, pivotIndex);\r\n      pivotIndex++;\r\n    } else {\r\n      noAnimation(animationArray);\r\n    }\r\n  }\r\n\r\n  return pivotIndex;\r\n};\r\n\r\n// added twice, once for highlightling and the second for marking as sorted\r\nconst compareAnimation = (animationArray, indexOne, indexTwo) => {\r\n  animationArray.push([indexOne, indexTwo]);\r\n  animationArray.push([indexOne, indexTwo]);\r\n};\r\n\r\nconst swapAnimation = (animationArray, arr, indexOne, pivotIndex) => {\r\n  let endOfArray = [];\r\n  let i = pivotIndex;\r\n  while (i < arr.length) {\r\n    endOfArray.push(arr[i++]);\r\n  }\r\n  animationArray.push([arr[indexOne], pivotIndex, endOfArray]);\r\n};\r\n\r\nconst noAnimation = (animationArray) => {\r\n  animationArray.push([\"do nothing\"]);\r\n};\r\n\r\nconst swap = (arr, a, b) => {\r\n  let temp = arr[a];\r\n  arr.splice(a, 1);\r\n  arr.splice(b, 0, temp);\r\n};\r\n","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport * as MergeAlgorithm from '../SortingAlgos/mergeAlgorithm.js'\r\nimport * as BubbleAlgorithm from '../SortingAlgos/bubbleAlgorithm.js'\r\nimport * as QuickAlgorithm from '../SortingAlgos/quickAlgorithm.js'\r\n\r\n//test\r\n// import {getMergeSortAnimations} from '../SortingAlgos/testAlgorithms.js';\r\n\r\nconst windowWidth = window.innerWidth;\r\nconst maxHeight = window.innerHeight/2;\r\n\r\nconst mobilePadding = 4/100;\r\nconst pcPadding = 31/100;\r\n\r\nexport class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            windowWidth,\r\n            maxHeight,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const windowWidth = window.innerWidth;\r\n        const maxHeight = window.innerHeight/2;\r\n\r\n        const array = [];\r\n        var numberOfBars = 0;\r\n\r\n        // get number of bars that can fit in the panel\r\n        if (windowWidth > 1024) {\r\n            numberOfBars = Math.trunc(windowWidth*(1 - (pcPadding*2))/5);\r\n        } else {\r\n            numberOfBars = Math.trunc(windowWidth*(1 - (mobilePadding*2))/5);\r\n        }\r\n\r\n        for (let i = 0; i < numberOfBars; i++) {\r\n            // chosen 10 as minimum to make the value visable on the interface\r\n            array.push(randomIntegerFromInterval(10, maxHeight));\r\n        }\r\n        this.setState({array, windowWidth, maxHeight});\r\n        \r\n        // reset colour\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            arrayBars[i].style.backgroundColor = 'cadetblue'\r\n        }\r\n    }\r\n\r\n    MergeSort(array) {\r\n        const animationArray = MergeAlgorithm.getMergeSortAnimations(array);\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                this.compareAnimation(animationArray[i], i, arrayBars);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [firstIndex, newHeight] = animationArray[i];\r\n                    const firstStyle = arrayBars[firstIndex].style;\r\n                    firstStyle.height = `${newHeight}px`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    QuickSort(array) {\r\n        const animationArray = QuickAlgorithm.getQuickSortAnimations(array);\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                this.compareAnimation(animationArray[i], i, arrayBars);\r\n            } else {\r\n                if (animationArray[i][0] !== \"do nothing\") {\r\n                    setTimeout(() => {\r\n                        const [valueOne, pivotIndex, endOfArray] = animationArray[i];\r\n                        // update first moved value\r\n                        const firstStyle = arrayBars[pivotIndex].style;\r\n                        firstStyle.height = `${valueOne}px`;\r\n                        // update the changes due to the shuffle\r\n                        let startingPosition = pivotIndex;\r\n                        let length = endOfArray.length + pivotIndex;\r\n                        let indexOfEndOfArray = 0;\r\n                        for(let i = startingPosition; i < length; i++) {\r\n                            const firstStyle = arrayBars[i].style;\r\n                            firstStyle.height = `${endOfArray[indexOfEndOfArray++]}px`;\r\n                        }\r\n                    }, i * 5);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    InsertionSort(array) {\r\n        // const animationArray = InsertionAlgorithm.getInsertionSortAnimations(array);\r\n        // this.animateSort(animationArray);\r\n    }\r\n\r\n    // use when data set is almost sorted (or small data sets)\r\n    BubbleSort(array) {\r\n        const animationArray = BubbleAlgorithm.getBubbleSortAnimations(array);\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                this.compareAnimation(animationArray[i], i, arrayBars);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [firstIndex, firstValue, secondIndex, secondValue] = animationArray[i];\r\n                    if (firstValue > secondValue) {\r\n                        const firstStyle = arrayBars[firstIndex].style;\r\n                        firstStyle.height = `${secondValue}px`;\r\n                        const secondStyle = arrayBars[secondIndex].style;\r\n                        secondStyle.height = `${firstValue}px`;\r\n                    }\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    compareAnimation(value, i, arrayBars) {\r\n        const [firstIndex, secondIndex] = value;\r\n        const firstStyle = arrayBars[firstIndex].style;\r\n        const secondStyle = arrayBars[secondIndex].style;\r\n        const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n        setTimeout(() => {\r\n            firstStyle.backgroundColor = color;\r\n            secondStyle.backgroundColor = color;\r\n        }, i * 5);\r\n    }\r\n\r\n    render() {\r\n        const {array, maxHeight} = this.state;\r\n\r\n        return (\r\n            <div className=\"page\">\r\n                <div className=\"panel\">\r\n                    <div className=\"array-container\" style={{height: `${maxHeight}px`}}>\r\n                        {array.map((value, index) => (\r\n                            <div className=\"array-bar\" key={index} style={{height: `${value}px`}}/>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => this.resetArray()}> Generate New Values</button>\r\n                    <button onClick={() => this.MergeSort(array)}> Merge Sort</button>\r\n                    <button onClick={() => this.QuickSort(array)}> QuickSort</button>\r\n                    {/* <button onClick={() => this.HeapSort(array)}> Heap Sort</button> */}\r\n                    <button onClick={() => this.BubbleSort(array)}>Bubble Sort</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntegerFromInterval(min, max) {\r\n    return Math.floor(Math.random() * max - min + 1) + min;\r\n}\r\n\r\nexport default SortingVisualiser;","import React from \"react\";\nimport SortingVisualiser from \"./SortingVisualiser/SortingVisualiser\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}